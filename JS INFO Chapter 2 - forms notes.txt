FORM ELEMENTS

document.forms
A form is available as document.forms[name/index].
form.elements
Form elements are available as form.elements[name/index], or can use just form[name/index]. The elements property also works for <fieldset>.
element.form
Elements reference their form in the form property.
Value is available as input.value, textarea.value, select.value, etc. (For checkboxes and radio buttons, use input.checked to determine whether a value is selected.)

For <select>, one can also get the value by the index select.selectedIndex or through the options collection select.options.

FOCUSING: FOCUS/BLUR

- We can’t “prevent losing focus” by calling event.preventDefault() in onblur, because onblur works after the element lost the focus. (can call this.focus() again though)
- Allow focusing on any element: tabindex - the switch order is: elements with tabindex from 1 and above go first (in the tabindex order),
 and then elements without tabindex (e.g. a regular <input>).
- There are two special values:

tabindex="0" puts an element among those without tabindex. That is, when we switch elements, elements with tabindex=0 go after elements with tabindex ≥ 1.

Usually it’s used to make an element focusable, but keep the default switching order. To make an element a part of the form on par with <input>.

tabindex="-1" allows only programmatic focusing on an element. The Tab key ignores such elements, but method elem.focus() works.

- We can add tabindex from JavaScript by using the elem.tabIndex property. That has the same effect.
- Events focus and blur do not bubble, but propagate down on the capturing phase. => 1) use capturing or 2) use focusin and focusout events which are same as focus/blur and bubble.


Task 1 - Editable div (div -> textarea and vice versa on clicking) - NICE (use el1.replaceWith(el2))
Task 2 - Edit TD on click.
 - New things
         - use .classList.add('...') to toggle styles!
         - use currentEl, since you want to handle & deflect clicks on an element already under edit!
	 - use .insertAdjacentHTML('....html string....') to add html
	 - if using event delegation, need to store ref. to current element under edit!
	 - multiple .closest checks -  el = el.closest('td, .edit-cancel, .edit-save');

Task 3 - Keyboard driven mouse
   	 - set el position to 'fixed' => easier handling of coordinates since window relative now.
	 - this.style.left if not defined, gives NaN on parseInt(this.style.left) => fix this by assigning this.style.left = this.getBCR().left + 'px'
	 - set .tabIndex = 0 if you wanna focus unfocusable el.
         - IMP - set e.preventDefault() to prevent browser events on arrow keys like horizontal scrolling!!


EVENTS: CHAHGE, INPUT, CUT, COPY, PASTE


change	A value was changed.	For text inputs triggers on focus loss.

input	For text inputs on every change.	Triggers immediately unlike change. ( but can't detect other key movements like arrow keys which dont change input)
Can’t prevent anything in oninput as the input event occurs after the value is modified.

cut/copy/paste	Cut/copy/paste actions.	The action can be prevented. The event.clipboardData property gives access to the clipboard (event.clipboardData.getData('text/plain') to get data)
. All browsers except Firefox also support an additional asynchronous API of accessing the clipboard -- navigator.clipboard which is meant for use in any context and not just the browser.
For oncut/oncopy, use document.getSelection() since data isn't in the clipboard yet.

--Security restrictions
Even if someone decides to save event.clipboardData in an event handler, and then access it later – it won’t work. 
It’s forbidden to generate “custom” clipboard events with dispatchEvent in all browsers except Firefox. And even if we manage to dispatch such event, the specification clearly states that such “syntetic” events must not provide access to the clipboard.

=> use navigator.clipboard after asking for user permission.


FORMS - EVENT & METHOD SUBMIT
 - 2 ways to submit a form - 1. click <input type="submit"> or <input type="image">; 2. press Enter on an input field.
 - => both lead to submit event on the form which can be client-side processed and prevented by e.preventDefault/return false.
 - When using method 2) => triggers onclick on submit button.
 - IMP - Can manually send form using js -> form.submit() but does NOT create a submit event.
 - Eg. of google search using form in js.


Task - a page centered modal with submit callback. 
  - to center modal => use text-align: center; on parent & vertical-align: middle on self & parent:before.
  - to create overlay - add position: fixed, top, left:0, height,width: 100% and add the popup as a sibling with higher z index. + document.body.style.overflowY = '' / hidden to toggle scroll.
  - to destroby model - add handler for Escape Key on doc like
     document.onkeydown = function(e) {
        if (e.key == 'Escape') {
          complete(null);
        }
      };

 - IMP - to prevent tab escaping from modal => select 1st element & last el. using form.elements[0] & form.elements[form.elements.length-1]. 

	On 1st El (connect back tab to last el) like firstEl.onkeydown = function(e) { if(e.key === 'Tab' && e.shiftKey) lastEl.focus(); return false; } similar for last el with !e.shiftKey  